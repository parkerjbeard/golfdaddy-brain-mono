from pydantic import BaseModel, Field
from typing import Optional, List
from uuid import UUID
from datetime import datetime
from enum import Enum

# Use the same enum as defined in the SQL schema
class TaskStatus(str, Enum):
    ASSIGNED = "assigned"
    IN_PROGRESS = "in_progress"
    BLOCKED = "blocked"
    COMPLETED = "completed"

class Task(BaseModel):
    id: Optional[UUID] = Field(None, description="Task ID, generated by DB if None")
    description: str
    assignee_id: Optional[UUID] = None
    status: TaskStatus = TaskStatus.ASSIGNED
    # RACI roles
    responsible_id: Optional[UUID] = None
    accountable_id: Optional[UUID] = None
    consulted_ids: Optional[List[UUID]] = Field(default_factory=list)
    informed_ids: Optional[List[UUID]] = Field(default_factory=list)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
        use_enum_values = True