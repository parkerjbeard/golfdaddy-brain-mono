"""
Comprehensive test fixtures for auto documentation feature testing.
"""

import json
import uuid
from datetime import datetime, timedelta
from typing import Any, Dict, List

# Sample git diffs for testing
SAMPLE_DIFFS = {
    "simple_addition": """diff --git a/backend/app/services/user_service.py b/backend/app/services/user_service.py
index abc123..def456 100644
--- a/backend/app/services/user_service.py
+++ b/backend/app/services/user_service.py
@@ -10,6 +10,15 @@ class UserService:
     def __init__(self, db: Session):
         self.db = db
     
+    async def get_user_by_email(self, email: str) -> Optional[User]:
+        \"\"\"
+        Retrieve a user by their email address.
+        
+        Args:
+            email: The email address to search for
+            
+        Returns:
+            User object if found, None otherwise
+        \"\"\"
+        return self.db.query(User).filter(User.email == email).first()
+        
     def get_user(self, user_id: int) -> Optional[User]:""",
    "api_endpoint_addition": """diff --git a/backend/app/api/reports.py b/backend/app/api/reports.py
index 111222..333444 100644
--- a/backend/app/api/reports.py
+++ b/backend/app/api/reports.py
@@ -25,3 +25,18 @@ async def get_daily_reports(
     ):
     reports = await report_service.get_daily_reports(date_from, date_to)
     return reports
+
+@router.post("/generate", response_model=ReportResponse)
+async def generate_report(
+    report_data: ReportGenerateRequest,
+    current_user: User = Depends(get_current_user),
+    report_service: ReportService = Depends(get_report_service)
+):
+    \"\"\"
+    Generate a new report based on provided data.
+    
+    Requires authentication and proper permissions.
+    \"\"\"
+    report = await report_service.generate_report(
+        user_id=current_user.id,
+        data=report_data
+    )
+    return report""",
    "bug_fix": """diff --git a/backend/app/services/auth_service.py b/backend/app/services/auth_service.py
index aaa111..bbb222 100644
--- a/backend/app/services/auth_service.py
+++ b/backend/app/services/auth_service.py
@@ -45,7 +45,7 @@ class AuthService:
         if not user:
             return None
         
-        if not verify_password(password, user.password):
+        if not user.is_active or not verify_password(password, user.hashed_password):
             return None
             
         return user""",
    "schema_update": """diff --git a/backend/app/schemas/task.py b/backend/app/schemas/task.py
index ccc333..ddd444 100644
--- a/backend/app/schemas/task.py
+++ b/backend/app/schemas/task.py
@@ -15,6 +15,8 @@ class TaskCreate(BaseModel):
     description: str
     priority: TaskPriority
     assignee_id: Optional[int] = None
+    due_date: Optional[datetime] = None
+    tags: List[str] = []
     
 class TaskUpdate(BaseModel):
     title: Optional[str] = None""",
    "multiple_files": """diff --git a/backend/app/models/project.py b/backend/app/models/project.py
index 123abc..456def 100644
--- a/backend/app/models/project.py
+++ b/backend/app/models/project.py
@@ -12,6 +12,7 @@ class Project(Base):
     name = Column(String, nullable=False)
     description = Column(Text)
     status = Column(String, default="active")
+    budget = Column(Numeric(10, 2))
     created_at = Column(DateTime, default=datetime.utcnow)
     
diff --git a/backend/app/api/projects.py b/backend/app/api/projects.py
index 789ghi..012jkl 100644
--- a/backend/app/api/projects.py
+++ b/backend/app/api/projects.py
@@ -30,3 +30,12 @@ async def create_project(
     ):
     project = await project_service.create_project(project_data, current_user.id)
     return project
+
+@router.put("/{project_id}/budget")
+async def update_project_budget(
+    project_id: int,
+    budget: float,
+    current_user: User = Depends(get_admin_user)
+):
+    project = await project_service.update_budget(project_id, budget)
+    return project""",
}

# Sample documentation patches generated by AI
SAMPLE_PATCHES = {
    "user_service_patch": """diff --git a/docs/api/user-service.md b/docs/api/user-service.md
index 111222..333444 100644
--- a/docs/api/user-service.md
+++ b/docs/api/user-service.md
@@ -15,6 +15,20 @@ The UserService provides methods for user management operations.
 
 Returns the user object if found, `None` otherwise.
 
+### get_user_by_email
+
+Retrieve a user by their email address.
+
+**Parameters:**
+- `email` (str): The email address to search for
+
+**Returns:**
+- `User`: User object if found
+- `None`: If no user with the email exists
+
+**Example:**
+```python
+user = await user_service.get_user_by_email("john@example.com")
+```
+
 ## Error Handling""",
    "api_endpoint_patch": """diff --git a/docs/api/reports-endpoint.md b/docs/api/reports-endpoint.md
index aaa111..bbb222 100644
--- a/docs/api/reports-endpoint.md
+++ b/docs/api/reports-endpoint.md
@@ -25,3 +25,29 @@ GET /api/reports/daily?date_from=2024-01-01&date_to=2024-01-31
 }
 ```
 
+## Generate Report
+
+`POST /api/reports/generate`
+
+Generate a new report based on provided data. Requires authentication and proper permissions.
+
+### Request Body
+
+```json
+{
+  "report_type": "performance",
+  "period": "monthly",
+  "metrics": ["completion_rate", "avg_time"]
+}
+```
+
+### Response
+
+```json
+{
+  "id": "550e8400-e29b-41d4-a716-446655440000",
+  "status": "completed",
+  "generated_at": "2024-01-15T10:30:00Z",
+  "download_url": "/api/reports/download/550e8400-e29b-41d4-a716-446655440000"
+}
+```""",
}

# Mock OpenAI responses
MOCK_OPENAI_RESPONSES = {
    "analyze_diff": {"choices": [{"message": {"content": SAMPLE_PATCHES["user_service_patch"]}}]},
    "quality_check": {
        "choices": [
            {
                "message": {
                    "content": json.dumps(
                        {
                            "overall_score": 85,
                            "completeness_score": 90,
                            "clarity_score": 88,
                            "accuracy_score": 92,
                            "consistency_score": 80,
                            "grammar_score": 95,
                            "structure_score": 82,
                            "issues": ["Missing error handling documentation", "No rate limiting information"],
                            "suggestions": ["Add examples for error responses", "Document rate limiting policies"],
                        }
                    )
                }
            }
        ]
    },
    "embedding": {"data": [{"embedding": [0.1] * 1536}]},  # Mock embedding vector
}

# Sample Slack payloads
SLACK_PAYLOADS = {
    "button_action": {
        "type": "block_actions",
        "user": {"id": "U123456", "name": "john.doe"},
        "api_app_id": "A123456",
        "token": "test-token",
        "container": {"type": "message", "message_ts": "1234567890.123456"},
        "trigger_id": "123456.123456.abcdef",
        "team": {"id": "T123456", "domain": "test-workspace"},
        "channel": {"id": "C123456", "name": "documentation"},
        "response_url": "https://hooks.slack.com/actions/T123456/123456/abcdef",
        "actions": [
            {
                "type": "button",
                "action_id": "approve_doc_update",
                "block_id": "doc_actions",
                "text": {"type": "plain_text", "text": "Approve"},
                "value": "550e8400-e29b-41d4-a716-446655440000",
                "action_ts": "1234567890.123456",
            }
        ],
    },
    "reject_action": {
        "type": "block_actions",
        "user": {"id": "U123456", "name": "jane.smith"},
        "actions": [
            {"type": "button", "action_id": "reject_doc_update", "value": "550e8400-e29b-41d4-a716-446655440000"}
        ],
    },
}


# Database fixtures
def create_doc_approval(
    approval_id: str = None, commit_hash: str = "abc123def456", status: str = "pending"
) -> Dict[str, Any]:
    """Create a mock DocApproval object."""
    return {
        "id": approval_id or str(uuid.uuid4()),
        "commit_hash": commit_hash,
        "repository": "test-owner/test-repo",
        "diff_content": SAMPLE_DIFFS["simple_addition"],
        "patch_content": SAMPLE_PATCHES["user_service_patch"],
        "slack_channel": "#documentation",
        "slack_message_ts": "1234567890.123456",
        "status": status,
        "created_at": datetime.utcnow(),
        "expires_at": datetime.utcnow() + timedelta(hours=24),
        "approval_metadata": {
            "commit_message": "Add user email lookup functionality",
            "files_affected": 1,
            "additions": 14,
            "deletions": 0,
        },
    }


def create_doc_embedding(
    doc_id: str = None, title: str = "Test Documentation", repository: str = "test-owner/test-repo"
) -> Dict[str, Any]:
    """Create a mock DocEmbedding object."""
    return {
        "id": doc_id or str(uuid.uuid4()),
        "title": title,
        "content": "This is test documentation content for embedding generation.",
        "doc_type": "api",
        "file_path": "docs/api/test.md",
        "repository": repository,
        "embedding": [0.1] * 1536,
        "metadata": {"version": "1.0", "last_updated": datetime.utcnow().isoformat()},
        "created_at": datetime.utcnow(),
    }


def create_code_context(
    file_path: str = "backend/app/services/test_service.py", repository: str = "test-owner/test-repo"
) -> Dict[str, Any]:
    """Create a mock CodeContext object."""
    return {
        "id": str(uuid.uuid4()),
        "repository": repository,
        "file_path": file_path,
        "module_name": "test_service",
        "class_names": ["TestService", "TestHelper"],
        "function_names": ["get_test", "create_test", "update_test"],
        "imports": ["typing", "sqlalchemy", "app.models"],
        "design_patterns": ["Repository", "Service Layer"],
        "dependencies": ["app/models/test.py", "app/core/database.py"],
        "complexity_score": 3.5,
        "context_embedding": [0.2] * 1536,
        "created_at": datetime.utcnow(),
    }


# Quality validation test cases
QUALITY_TEST_CASES = {
    "high_quality_doc": """# User Service API

## Overview
The User Service provides comprehensive user management functionality for the application.

## Methods

### get_user(user_id: int) -> Optional[User]
Retrieves a user by their unique identifier.

**Parameters:**
- `user_id` (int): The unique identifier of the user

**Returns:**
- `User`: The user object if found
- `None`: If no user exists with the given ID

**Raises:**
- `ValueError`: If user_id is negative
- `DatabaseError`: If database connection fails

**Example:**
```python
try:
    user = user_service.get_user(123)
    if user:
        print(f"Found user: {user.name}")
except DatabaseError as e:
    logger.error(f"Database error: {e}")
```

## Error Handling
All methods implement proper error handling and logging.""",
    "low_quality_doc": """user service

gets users from database

methods:
- get_user - gets a user
- other stuff

no examples provided""",
}

# GitHub API mock responses
GITHUB_MOCK_RESPONSES = {
    "create_pr": {
        "html_url": "https://github.com/test-owner/test-repo/pull/123",
        "number": 123,
        "state": "open",
        "title": "Automated docs update for abc123",
        "body": "This PR contains automated documentation updates.",
    },
    "get_contents": [
        {"name": "README.md", "path": "README.md", "type": "file", "content": "IyBUZXN0IFJlcG8="},  # Base64 encoded
        {"name": "docs", "path": "docs", "type": "dir"},
    ],
}

# Test environment configuration
TEST_CONFIG = {
    "openai_api_key": "test-openai-key-123",
    "github_token": "test-github-token-456",
    "slack_bot_token": "xoxb-test-slack-token",
    "slack_signing_secret": "test-signing-secret",
    "docs_repository": "test-owner/test-docs",
    "database_url": "postgresql://test:test@localhost/test_db",
}

# Semantic search test data
SEMANTIC_SEARCH_DATA = {
    "search_queries": [
        "How to authenticate users?",
        "API rate limiting",
        "Database migration procedures",
        "Error handling best practices",
    ],
    "expected_results": {
        "How to authenticate users?": [
            {"title": "Authentication Guide", "similarity": 0.92},
            {"title": "User Service API", "similarity": 0.85},
        ],
        "API rate limiting": [
            {"title": "API Best Practices", "similarity": 0.88},
            {"title": "Rate Limiting Configuration", "similarity": 0.95},
        ],
    },
}

# Workflow test scenarios
WORKFLOW_SCENARIOS = {
    "simple_approval": {
        "description": "Simple documentation update approval workflow",
        "steps": [
            "Commit triggers GitHub Action",
            "AutoDocClient analyzes diff",
            "AI generates documentation patch",
            "Slack notification sent",
            "User approves update",
            "GitHub PR created",
        ],
    },
    "rejection_with_feedback": {
        "description": "Documentation update rejected with feedback",
        "steps": [
            "Commit triggers GitHub Action",
            "AutoDocClient analyzes diff",
            "AI generates documentation patch",
            "Slack notification sent",
            "User rejects with reason",
            "Rejection logged, no PR created",
        ],
    },
    "quality_failure": {
        "description": "Documentation fails quality checks",
        "steps": [
            "Documentation generated",
            "Quality service validates",
            "Score below threshold",
            "Suggestions provided",
            "Process halted for improvement",
        ],
    },
}
