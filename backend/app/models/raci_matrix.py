from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from uuid import UUID
from datetime import datetime
from enum import Enum

class RaciRoleType(str, Enum):
    RESPONSIBLE = "R"
    ACCOUNTABLE = "A"
    CONSULTED = "C"
    INFORMED = "I"

class RaciMatrixType(str, Enum):
    INVENTORY_INBOUND = "inventory_inbound"
    SHIPBOB_ISSUES = "shipbob_issues"  
    DATA_COLLECTION = "data_collection"
    RETAIL_LOGISTICS = "retail_logistics"
    CUSTOM = "custom"

class RaciAssignment(BaseModel):
    """Individual RACI assignment for a specific activity and role."""
    activity_id: str = Field(description="Unique identifier for the activity")
    role_id: str = Field(description="Unique identifier for the role/person")
    role: RaciRoleType = Field(description="RACI role assignment")
    notes: Optional[str] = Field(None, description="Additional notes for this assignment")

class RaciActivity(BaseModel):
    """A process activity within a RACI matrix."""
    id: str = Field(description="Unique identifier for the activity")
    name: str = Field(description="Name of the activity")
    description: Optional[str] = Field(None, description="Detailed description of the activity")
    order: int = Field(default=0, description="Order of activity in the matrix")

class RaciRole(BaseModel):
    """A role or person in a RACI matrix."""
    id: str = Field(description="Unique identifier for the role")
    name: str = Field(description="Name of the role or person")
    title: Optional[str] = Field(None, description="Job title or role description")
    user_id: Optional[UUID] = Field(None, description="Associated user ID if this is a person")
    is_person: bool = Field(default=False, description="True if this represents a specific person")
    order: int = Field(default=0, description="Order of role in the matrix")

class RaciMatrix(BaseModel):
    """Complete RACI matrix defining a process workflow."""
    id: Optional[UUID] = Field(None, description="Matrix ID, generated by DB if None")
    name: str = Field(description="Name of the RACI matrix")
    description: Optional[str] = Field(None, description="Description of the process")
    matrix_type: RaciMatrixType = Field(description="Type of matrix")
    activities: List[RaciActivity] = Field(description="List of activities in the process")
    roles: List[RaciRole] = Field(description="List of roles/people involved")
    assignments: List[RaciAssignment] = Field(description="RACI assignments")
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    is_active: bool = Field(default=True, description="Whether this matrix is currently active")
    created_by: Optional[UUID] = Field(None, description="User who created this matrix")
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
        use_enum_values = True

class CreateRaciMatrixPayload(BaseModel):
    """Payload for creating a new RACI matrix."""
    name: str
    description: Optional[str] = None
    matrix_type: RaciMatrixType
    activities: List[RaciActivity]
    roles: List[RaciRole]
    assignments: List[RaciAssignment]
    metadata: Optional[Dict[str, Any]] = None

class UpdateRaciMatrixPayload(BaseModel):
    """Payload for updating an existing RACI matrix."""
    name: Optional[str] = None
    description: Optional[str] = None
    activities: Optional[List[RaciActivity]] = None
    roles: Optional[List[RaciRole]] = None
    assignments: Optional[List[RaciAssignment]] = None
    metadata: Optional[Dict[str, Any]] = None
    is_active: Optional[bool] = None

class UpdateAssignmentsPayload(BaseModel):
    """Payload for updating individual RACI assignments."""
    assignments: List[RaciAssignment] = Field(description="List of assignments to update")

class BulkAssignmentPayload(BaseModel):
    """Payload for bulk assignment operations."""
    activity_ids: List[str] = Field(description="List of activity IDs to apply assignments to")
    role_ids: List[str] = Field(description="List of role IDs to apply assignments to")
    role_type: RaciRoleType = Field(description="RACI role type to assign")
    notes: Optional[str] = Field(None, description="Notes to apply to all assignments")
    clear_existing: bool = Field(default=False, description="Whether to clear existing assignments first")

class RaciMatrixTemplate(BaseModel):
    """Template for a predefined RACI matrix."""
    template_id: str = Field(description="Unique identifier for the template")
    name: str = Field(description="Name of the template")
    description: str = Field(description="Description of what this template is for")
    matrix_type: RaciMatrixType = Field(description="Type of matrix this template creates")
    activities: List[RaciActivity] = Field(description="Predefined activities")
    roles: List[RaciRole] = Field(description="Predefined roles")
    assignments: List[RaciAssignment] = Field(description="Predefined assignments") 