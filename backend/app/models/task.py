from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from uuid import UUID
from datetime import datetime
from enum import Enum
from decimal import Decimal

# Use the same enum as defined in the SQL schema
class TaskStatus(str, Enum):
    ASSIGNED = "assigned"
    IN_PROGRESS = "in_progress"
    BLOCKED = "blocked"
    COMPLETED = "completed"

class Task(BaseModel):
    id: Optional[UUID] = Field(None, description="Task ID, generated by DB if None")
    title: str
    description: str
    assignee_id: Optional[UUID] = None
    status: TaskStatus = TaskStatus.ASSIGNED
    priority: Optional[str] = "MEDIUM"
    task_type: Optional[str] = Field(None, description="Type of task, e.g., 'general', 'manager_development'")
    # RACI roles
    responsible_id: Optional[UUID] = None
    accountable_id: Optional[UUID] = None
    consulted_ids: Optional[List[UUID]] = Field(default_factory=list)
    informed_ids: Optional[List[UUID]] = Field(default_factory=list)
    creator_id: Optional[UUID] = None
    due_date: Optional[datetime] = None
    estimated_hours: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2)
    actual_hours: Optional[Decimal] = Field(None, max_digits=5, decimal_places=2)
    tags: Optional[List[str]] = Field(default_factory=list)
    metadata: Optional[Dict[str, Any]] = Field(default_factory=dict)
    blocked: bool = False
    blocked_reason: Optional[str] = None
    doc_references: Optional[List[str]] = Field(default_factory=list)
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    class Config:
        from_attributes = True
        use_enum_values = True